{"version":3,"file":"static/js/368.e57b1394.chunk.js","mappings":"+PAEaA,EAAUC,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,oKASpBC,EAAYH,EAAAA,GAAAA,GAASI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,qDAKrBG,EAAOL,EAAAA,GAAAA,KAAWM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,4F,sEC0E/B,EAhFkB,WAChB,IAAMK,GAAWC,EAAAA,EAAAA,MACjBC,GAA0CC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAlDI,EAAaF,EAAA,GAAEG,EAAgBH,EAAA,GACtCI,GAA0BL,EAAAA,EAAAA,UAAS,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA/BE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GACtBG,GAAgCT,EAAAA,EAAAA,UAAS,IAAGU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAArCE,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GACtBG,GAAcC,EAAAA,EAAAA,IAAYC,EAAAA,GAE1BC,EAAe,SAAHC,GAAqC,IAADC,EAAAD,EAA9BE,OAAUC,EAAIF,EAAJE,KAAMC,EAAKH,EAALG,MACtC,OAAQD,GACN,IAAK,QACHZ,EAASa,GACT,MACF,IAAK,WACHT,EAAYS,GAKlB,EAkBA,OACEC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,MAACjC,EAAO,CAAAmC,SAAA,EACNC,EAAAA,EAAAA,KAAChC,EAAS,CAAA+B,SAAC,WACXF,EAAAA,EAAAA,MAAC3B,EAAI,CAAC+B,SApBS,SAAAC,GACnBA,EAAEC,kBAEGC,EAAAA,EAAAA,GAAkBlB,IAIrBP,GAAiB,GAEjBP,GAASiC,EAAAA,EAAAA,IAAM,CAAEvB,MAAAA,EAAOI,SAAAA,KAExBH,EAAS,IACTI,EAAY,KARZR,GAAiB,EAUrB,EAMmCoB,SAAA,EAC3BC,EAAAA,EAAAA,KAACM,EAAAA,EAAS,CACRC,MAAM,SACNZ,KAAK,QACLa,QAAQ,WACRC,KAAK,QACLb,MAAOd,EACP4B,SAAUnB,EACVoB,QAAQ,wCACRC,MAAM,+DACNC,UAAQ,EACRC,GAAI,CAAEC,GAAI,MAEZf,EAAAA,EAAAA,KAACM,EAAAA,EAAS,CACRU,MAAOtC,EACP6B,MAAM,aACNZ,KAAK,WACLa,QAAQ,WACRC,KAAK,WACLb,MAAOV,EACPwB,SAAUnB,EACVoB,QAAQ,uDACRC,MAAM,6GACNK,WACEvC,EACI,sHACA,GAENoC,GAAI,CAAEC,GAAI,MAEZf,EAAAA,EAAAA,KAACkB,EAAAA,EAAM,CAACV,QAAQ,YAAYC,KAAK,SAAQV,SAAC,kBAK7CX,IAAeY,EAAAA,EAAAA,KAACmB,EAAAA,EAAM,MAG7B,EC7EA,EARc,WACZ,OACEnB,EAAAA,EAAAA,KAACoB,EAAAA,EAAS,CAACC,SAAS,KAAKP,GAAI,CAAEQ,GAAI,EAAGC,GAAI,GAAIxB,UAC5CC,EAAAA,EAAAA,KAACwB,EAAS,KAGhB,C,uDCTO,IAAMpB,EAAoB,SAAAlB,GAC/B,QAAKA,GAIE,sDAAsDuC,KAAKvC,EACpE,C","sources":["components/LoginForm/LoginForm.styled.js","components/LoginForm/LoginForm.jsx","pages/Login/Login.jsx","utils/validators.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  max-width: 400px;\n  margin: 0 auto;\n  padding: 20px;\n  border: 1px solid #eee;\n  border-radius: 8px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.26);\n`;\n\nexport const FormTitle = styled.h2`\n  text-align: center;\n  font-size: 28px;\n`;\n\nexport const Form = styled.form`\n  width: 100%;\n  margin-top: 16px;\n  display: flex;\n  flex-direction: column;\n`;\n","import TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport { Wrapper, Form, FormTitle } from './LoginForm.styled';\nimport { useState } from 'react';\nimport { passwordValidator } from 'utils/validators';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { login } from 'redux/auth/authOperations';\nimport { selectIsRefreshed } from 'redux/auth/authSelectors';\nimport Loader from 'components/Loader';\n\nconst LoginForm = () => {\n  const dispatch = useDispatch();\n  const [passwordError, setPasswordError] = useState(false);\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const isRefreshed = useSelector(selectIsRefreshed);\n\n  const handleChange = ({ target: { name, value } }) => {\n    switch (name) {\n      case 'email':\n        setEmail(value);\n        break;\n      case 'password':\n        setPassword(value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (!passwordValidator(password)) {\n      setPasswordError(true);\n      return;\n    } else {\n      setPasswordError(false);\n\n      dispatch(login({ email, password }));\n\n      setEmail('');\n      setPassword('');\n    }\n  };\n\n  return (\n    <>\n      <Wrapper>\n        <FormTitle>Login</FormTitle>\n        <Form onSubmit={handleSubmit}>\n          <TextField\n            label=\"E-mail\"\n            name=\"email\"\n            variant=\"outlined\"\n            type=\"email\"\n            value={email}\n            onChange={handleChange}\n            pattern=\"^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$\"\n            title=\"Email may contain only letters, apostrophe, dash and spaces.\"\n            required\n            sx={{ mb: 2 }}\n          />\n          <TextField\n            error={passwordError}\n            label=\"Password *\"\n            name=\"password\"\n            variant=\"outlined\"\n            type=\"password\"\n            value={password}\n            onChange={handleChange}\n            pattern=\"^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{8,}$\"\n            title=\"Must contain at least one number and one uppercase and lowercase letter, and at least 8 or more characters\"\n            helperText={\n              passwordError\n                ? 'Password must contain at least one number and one uppercase and lowercase letter, and at least 8 or more characters'\n                : ''\n            }\n            sx={{ mb: 2 }}\n          />\n          <Button variant=\"contained\" type=\"submit\">\n            Sign in\n          </Button>\n        </Form>\n      </Wrapper>\n      {isRefreshed && <Loader />}\n    </>\n  );\n};\n\nexport default LoginForm;\n","import { Container } from '@mui/material';\nimport LoginForm from 'components/LoginForm';\n\nconst Login = () => {\n  return (\n    <Container maxWidth=\"sm\" sx={{ pt: 2, pb: 2 }}>\n      <LoginForm />\n    </Container>\n  );\n};\n\nexport default Login;\n","export const passwordValidator = password => {\n  if (!password) {\n    return false;\n  }\n\n  return /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{8,}$/.test(password);\n};\n\n//^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$\nexport const emailValidate = email => {\n  return /^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$/.test(email);\n};\n"],"names":["Wrapper","styled","_templateObject","_taggedTemplateLiteral","FormTitle","_templateObject2","Form","_templateObject3","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","passwordError","setPasswordError","_useState3","_useState4","email","setEmail","_useState5","_useState6","password","setPassword","isRefreshed","useSelector","selectIsRefreshed","handleChange","_ref","_ref$target","target","name","value","_jsxs","_Fragment","children","_jsx","onSubmit","e","preventDefault","passwordValidator","login","TextField","label","variant","type","onChange","pattern","title","required","sx","mb","error","helperText","Button","Loader","Container","maxWidth","pt","pb","LoginForm","test"],"sourceRoot":""}