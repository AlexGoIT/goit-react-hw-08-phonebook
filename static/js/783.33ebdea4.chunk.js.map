{"version":3,"file":"static/js/783.33ebdea4.chunk.js","mappings":"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","sources":["redux/contacts/contactsSelectors.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.js","components/ContactItem/ContactItem.styled.js","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/App.styled.js","pages/Contacts/Contacts.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n`;\n","import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\n\nimport { Form } from './ContactForm.styled';\nimport { addContact } from 'redux/contacts/contactsOperations';\nimport { selectContacts } from 'redux/contacts/contactsSelectors';\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const form = e.target;\n    const name = form.name.value;\n    const number = form.number.value;\n\n    if (contacts.some(contact => contact.name === name)) {\n      Notify.failure(`${name} is already in contacts`);\n      return;\n    }\n\n    dispatch(addContact({ name, number }));\n\n    form.reset();\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <TextField\n        id=\"name\"\n        name=\"name\"\n        label=\"Name\"\n        variant=\"outlined\"\n        pattern=\"^([A-Za-z-']{1,50})|([А-Яа-я-']{1,50})$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        sx={{ mb: 2 }}\n      />\n      <TextField\n        id=\"tel\"\n        name=\"number\"\n        label=\"Number\"\n        variant=\"outlined\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        pattern=\"^+d{2}(d{3})d{3}-d{2}-d{2}$\"\n        required\n        sx={{ mb: 2 }}\n      />\n      <Button\n        variant=\"contained\"\n        type=\"submit\"\n        sx={{ mb: 4, color: '#FFD700', fontWeight: '700' }}\n      >\n        Add contact\n      </Button>\n    </Form>\n  );\n};\n\nexport default ContactForm;\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  max-height: calc(100vh - 500px);\n  margin-top: 16px;\n  padding-block: 4px;\n  padding-left: 8px;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  overflow-y: auto;\n\n  &::-webkit-scrollbar {\n    width: 10px;\n    color: aqua;\n  }\n\n  &::-webkit-scrollbar-thumb {\n    background-color: #1976d2;\n    border-radius: 10px;\n    border: 2px solid #fff;\n  }\n`;\n","import styled from 'styled-components';\n\nexport const Item = styled.li`\n  width: 100%;\n  display: flex;\n  align-items: center;\n  font-size: 18px;\n  font-weight: 500;\n\n  :first-child {\n    margin-right: auto;\n  }\n\n  button {\n    height: 35px;\n    margin-left: 16px;\n    margin-right: 8px;\n    border: none;\n    border-radius: 6px;\n    box-shadow: 2px 2px 5px 0px rgba(0, 0, 0, 0.75);\n    font-size: 18px;\n    font-weight: 700;\n    cursor: pointer;\n  }\n\n  button:is(:hover, :focus) {\n    background-color: #ff8585;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport IconButton from '@mui/material/IconButton';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { Item } from './ContactItem.styled';\n\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/contactsOperations';\n\nconst ContactItem = ({ contact: { id, name, number } }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <Item>\n      <span>{name}</span>\n      <span>{number}</span>\n      <IconButton\n        aria-label=\"delete\"\n        onClick={() => dispatch(deleteContact(id))}\n      >\n        <DeleteIcon />\n      </IconButton>\n    </Item>\n  );\n};\n\nexport default ContactItem;\n\nContactItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import { List } from './ContactList.styled';\nimport ContactItem from '../ContactItem';\nimport { useSelector } from 'react-redux';\nimport { selectContacts, selectFilter } from 'redux/contacts/contactsSelectors';\n\nconst ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  const isNotEmptyList = contacts?.length > 0;\n\n  // Filter\n  const contactFilter = () => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase().trim())\n    );\n  };\n\n  return (\n    <List>\n      {isNotEmptyList &&\n        contactFilter().map(contact => {\n          return <ContactItem key={contact.id} contact={contact} />;\n        })}\n    </List>\n  );\n};\n\nexport default ContactList;\n","import TextField from '@mui/material/TextField';\nimport { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/contacts/contactsOperations';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <TextField\n      id=\"filter\"\n      label=\"Filter\"\n      name=\"filter\"\n      variant=\"outlined\"\n      fullWidth\n      onChange={e => dispatch(setFilter(e.target.value))}\n    />\n  );\n};\n\nexport default Filter;\n","import styled from 'styled-components';\n\nexport const ListTitle = styled.h2`\n  margin-bottom: 16px;\n  text-align: center;\n  font-size: 30px;\n  font-weight: 700;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { selectError, selectIsLoading } from 'redux/contacts/contactsSelectors';\nimport { fetchContacts } from 'redux/contacts/contactsOperations';\n\nimport { Container } from '@mui/material';\nimport ContactForm from 'components/ContactForm';\nimport ContactList from 'components/ContactList';\nimport Filter from 'components/Filter';\nimport Loader from 'components/Loader';\nimport { ListTitle } from 'components/App.styled';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Container className=\"container\" maxWidth=\"sm\" sx={{ pt: 2, pb: 2 }}>\n        <ContactForm />\n        <ListTitle>Contacts</ListTitle>\n        <Filter />\n        {!error && <ContactList />}\n        {isLoading && !error && <Loader />}\n      </Container>\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilter","filter","Form","styled","_templateObject","_taggedTemplateLiteral","dispatch","useDispatch","useSelector","_jsxs","onSubmit","e","preventDefault","form","target","name","value","number","some","contact","Notify","concat","addContact","reset","children","_jsx","TextField","id","label","variant","pattern","title","required","sx","mb","Button","type","color","fontWeight","List","Item","_ref","_ref$contact","IconButton","onClick","deleteContact","DeleteIcon","isNotEmptyList","length","toLowerCase","includes","trim","map","ContactItem","fullWidth","onChange","setFilter","ListTitle","useEffect","fetchContacts","_Fragment","Container","className","maxWidth","pt","pb","ContactForm","Filter","ContactList","Loader"],"sourceRoot":""}